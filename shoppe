#!/bin/bash

# shoppe by knuxify
version="build 2019-04-26"
debug=true

# Colors
color() {
	case $1 in
		0) printf "\033[30m";;
		1) printf "\033[31m";;
		2) printf "\033[32m";;
		3) printf "\033[33m";;
		4) printf "\033[34m";;
		5) printf "\033[35m";;
		6) printf "\033[36m";;
		7) printf "\033[37m";;
		r) printf "\033[0m";;
	esac
}
infoPrefix="$(color 4)||$(color r)"
warnPrefix="$(color 3)~!$(color r)"
errorPrefix="$(color 1)!!$(color r)"
debugPrefix="$(color 5)~~$(color r)"
debugprint() {
	if [ "$debug" = "true" ]; then
		echo -e "$debugPrefix $*"
	fi
}

debugprint "shoppe version $version"

# Don't run shoppe as root!
if [ "$EUID" -eq 0 ]; then echo -e "$errorprefix Don't run shoppe as root!"; exit 4; fi

repofile="$HOME/.config/shoppe/repos"
configfile="$HOME/.config/shoppe/config"

# Create shoppe files
if ! [ -e "$HOME/.config/shoppe" ]; then
	mkdir $HOME/.config/shoppe
	touch $HOME/.config/shoppe/config
	echo "GithubRepo=knuxify/shoppe-repos" > $repofile
fi

# Load shoppe config
while IFS="" read -r configline || [ -n "$configline" ]; do
	echo "TODO"
done < $configfile

# TODO package managers
unsupportedManagers="emerge nix-env"
# emerge - Gentoo would require searching for the right repo for the package, and not following that would cause false failures.
# nix-env - I can't figure out how to install a package and I'm certainly not installing nixOS just to find out.

# Detect currently installed package managers
supportedManagers="pkg apt apt-get yum dnf pacman yaourt pacaur yay apk"

for pm in $supportedManagers; do
	if command -v $pm &>/dev/null; then
		installed="$installed $pm"
		debugprint "Found $pm."
	fi
done

for pm in $unsupportedManagers; do
	if command -v $pm &>/dev/null; then
		echo -e "$warnPrefix Detected a known but unsupported package manager: $pm."
		echo -e "$warnPrefix It might be added in a later update."
	fi
done

success() {
	echo "$infoPrefix Success."
	exit 0
}

# Functions: Install, remove, update, upgrade.
# Future functions: fetch, find, info.

pinstall() {
	if [ -z "$packages" ]; then echo -e "$errorPrefix Nothing to install!"; exit 2; fi
	for pm in $installed; do
		echo -e "$infoPrefix Using $pm..."
		case $pm in
			apt|apt-get|yum|dnf) sudo $pm install $packages $switches && success;;
			pkg) $pm install $packages $switches && success;;
			pacman) sudo $pm -S $packages $switches && success;;
			yaourt|yay) $pm -S $packages $switches && success;;
			apk) sudo $pm add $packages $switches && success;;
		esac
		echo -e "$warnPrefix $pm failed."
	done
	echo -e "$infoPrefix Searching on shoppe repos..."
	while IFS="" read -r repo || [ -n "$repo" ]; do
		case $repo in
			GithubRepo=*) curl -i https://github.com/$repo/master/$arch/ && echo "Found package in repository.";;
		esac
	done < $repofile
	echo -e "$errorPrefix Failed to install. Check your spelling."
}

premove() {
	if [ -z "$packages" ]; then echo -e "$errorPrefix Nothing to remove!"; exit 2; fi
	for pm in $installed; do
		echo -e "$infoPrefix Using $pm..."
		case $pm in
			apt|apt-get|yum|dnf) sudo $pm remove $packages $switches && success;;
			pkg) $pm remove $packages $switches && success;;
			pacman) sudo $pm -R $packages $switches && success;;
			yaourt|yay) $pm -R $packages $switches && success;;
			apk) sudo $pm del $packages $switches && success;;
		esac
		echo -e "$warnPrefix $pm failed."
	done
	echo -e "$errorPrefix Failed to remove. Check your spelling."
}

pupdate() {
	for pm in $installed; do
		echo -e "$infoPrefix Using $pm..."
		case $pm in
			apt|apt-get|yum|dnf|apk) sudo $pm update $packages $switches && success;;
			pkg) $pm update $packages $switches && success;;
			pacman) sudo $pm -Sy && success;;
			yaourt|yay) $pm -Sy && success;;
		esac
		echo -e "$warnPrefix $pm failed."
	done
	echo -e "$errorPrefix Repo update failed."
}


pupgrade() {
	for pm in $installed; do
		echo -e "$infoPrefix Using $pm..."
		case $pm in
			apt|apt-get|yum|dnf|apk) sudo $pm upgrade $packages $switches && success;;
			pkg) $pm upgrade $packages $switches && success;;
			pacman) sudo $pm -Syu $packages $switches && success;;
			yaourt|yay) $pm -Syu $packages $switches && success;;
		esac
		echo -e "$warnPrefix $pm failed."
	done
	echo -e "$errorPrefix Upgrade failed."
}

# Parse options.
for parse in $*; do
	case $parse in
		'install') command="install";;
		'remove') command="remove";;
		'update') command="update";;
		'upgrade') command="upgrade";;
		-*) switches="$switches $parse";;
#		+*) shoppeswitches="$shoppeswitches $parse";;
		*) packages="$packages $parse";;
	esac
done
command=$(echo "$command" | sed -e 's/^[ \t]*//')
packages=$(echo "$packages" | sed -e 's/^[ \t]*//')
switches=$(echo "$switches" | sed -e 's/^[ \t]*//')

# Execute required command
p$command
